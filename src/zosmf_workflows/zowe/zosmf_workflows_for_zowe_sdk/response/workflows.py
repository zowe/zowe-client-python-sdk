"""Zowe Client Python SDK.

This program and the accompanying materials are made available under the terms of the
Eclipse Public License v2.0 which accompanies this distribution, and is available at

https://www.eclipse.org/legal/epl-v20.html

SPDX-License-Identifier: EPL-2.0

Copyright Contributors to the Zowe Project.

Contributors:
    Zowe Community
    Uladzislau Kalesnikau
"""

from dataclasses import dataclass
from typing import Any, Literal, Optional


@dataclass
class CreateWorkflowResponse:
    """
    Workflow definition, returned by z/OSMF on a "create workflow" request.
    See more at: [Create a workflow: Response from a create workflow request](https://www.ibm.com/docs/en/zos/3.1.0?topic=services-create-workflow#POSTMethodCreateAWorkflow__CreateWorkflowResponse)

    Parameters
    ----------
    workflowKey: Optional[str]
        Workflow key. A string value, which is generated by z/OSMF to uniquely identify the workflow instance.
    workflowDescription: Optional[str]
        Workflow description.
    workflowID: Optional[str]
        Workflow ID. A short, arbitrary value that identifies the workflow.
    workflowVersion: Optional[str]
        Version of the workflow definition file.
    vendor: Optional[str]
        Name of the vendor that provided the workflow definition file.
    """

    workflowKey: Optional[str] = None
    workflowDescription: Optional[str] = None
    workflowID: Optional[str] = None
    workflowVersion: Optional[str] = None
    vendor: Optional[str] = None

    def __init__(self, response: dict[str, Any]) -> None:
        for key, value in response.items():
            super().__setattr__(key, value)

    def __getitem__(self, key: str) -> Any:
        return self.__dict__[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.__dict__[key] = value

@dataclass
class GetWorkflowPropertiesResponse:
    """
    Workflow definition, returned by z/OSMF on "get workflow properties" request.
    See more at: [Get the properties of a workflow: JSON object that is returned to a get workflow properties request](https://www.ibm.com/docs/en/zos/3.1.0?topic=services-get-properties-workflow#GETMethodRetrieveInformationAboutWF__ResponseBodyGetProperties)

    Parameters
    ----------
    workflowName: Optional[str]
        Descriptive name for the workflow.
    workflowKey: Optional[str]
        Workflow key. A string value, which is generated by z/OSMF to uniquely identify the workflow instance.
    workflowDescription: Optional[str]
        Workflow description.
    workflowID: Optional[str]
        Workflow ID. A short, arbitrary value that identifies the workflow.
    workflowVersion: Optional[str]
        Version of the workflow definition file.
    workflowDefinitionFileMD5Value: Optional[str]
        The 128-bit hash value that is associated with the workflow definition file that was used 
        to create the workflow.
    vendor: Optional[str]
        Name of the vendor that provided the workflow definition file.
    owner: Optional[str]
        User ID of the workflow owner.
    workflowArchiveSAFID: Optional[str]
        SAF ID who will own the archived workflow after a workflow is archived to a user specified directory.
    system: Optional[str]
        Full name of the z/OS system on which the workflow is to be performed.
        This value is in the format *sysplex.sysname*.
    jobsOutputDirectory: Optional[str]
        Name of the UNIX directory that is used for automatically saving job spool files from the workflow.
    category: Optional[Literal["general", "configuration", "provisioning"]]
        Category of the workflow, which is general, configuration, or provisioning.
    productID: Optional[str]
        Identifier of the product or component that is being configured through the workflow.
    productName: Optional[str]
        Name of the product or component that is being configured through the workflow.
    productVersion: Optional[str]
        Version and release of the product or component that is configured through the workflow.
    percentComplete: Optional[int]
        Percentage of the workflow that is completed.
    isCallable: Optional[bool]
        Indicates whether a workflow is eligible to be called by another workflow.
    containsParallelSteps: Optional[bool]
        For a parallel-steps workflow, this property is true. 
        If so, the automation ready steps can be run in parallel (concurrently), thus possibly completing more quickly.
    scope: Optional[Literal["system", "sysplex", "none"]]
        Restricts a workflow to one instance only.
    statusName: Optional[Literal["in-progress", "complete", "automation-in-progress", "canceled"]]
        Indicates the current workflow status.
    deleteCompletedJobs: Optional[bool]
        For a workflow that submits a job, this property specifies whether the job is deleted 
        from the JES spool after it completes successfully.
    automationStatus: Optional['WorkflowAutomationStatusResponse']
        A WorkflowAutomationStatusResponse object that contains details about
        the most recent start automation request for the workflow.
    autoDeleteOnCompletion: Optional[bool]
        Specifies whether the workflow is automatically deleted from the system after it completes successfully.
    access: Optional[Literal["Public", "Restricted", "Private"]]
        Specifies the access type for the workflow.
    accountInfo: Optional[str]
        For a workflow that submits a job, this property specifies the account information to use 
        in the JCL JOB statement.
    jobStatement: Optional[str]
        For a workflow that submits a job, this property specifies the JOB statement JCL that is used in the job.
    templateID: Optional[str]
        Specifies the unique identifier for the template.
    actionID: Optional[str]
        For an actions workflow, this property specifies the action ID for the action object.
    registryID: Optional[str]
        Specifies the ID of the software services registry.
    parentRegistryID: Optional[str]
        Specifies the ID of the software instance parent registry entry.
    domainID: Optional[str]
        Specifies the ID of the domain that is associated with the template.
    tenantID: Optional[str]
        Specifies the ID of the tenant that is associated with the resource pool.
    software_service_instance_name: Optional[str]
        Specifies the created software service instance name.
    templateName: Optional[str]
        Specifies the name of the template that is associated with the resource pool.
    globalVariableGroup: Optional[str]
        Global variable group for the workflow.
    isInstanceVariableWithoutPrefix: Optional[bool]
        Indicates whether the simplified format is used for references to instance variables.
    steps: Optional[list['WorkflowStepResponse']]
        Array of one or more WorkflowStepResponse objects 
        that contain details about each of the steps in the workflow.
    variables: Optional[list['WorkflowVariableResponse']]
        Array of one or more WorkflowVariableResponse objects 
        that contain details about each of the steps in the workflow.
    """

    workflowName: Optional[str] = None
    workflowKey: Optional[str] = None
    workflowDescription: Optional[str] = None
    workflowID: Optional[str] = None
    workflowVersion: Optional[str] = None
    workflowDefinitionFileMD5Value: Optional[str] = None
    vendor: Optional[str] = None
    owner: Optional[str] = None
    workflowArchiveSAFID: Optional[str] = None
    system: Optional[str] = None
    jobsOutputDirectory: Optional[str] = None
    category: Optional[Literal["general", "configuration", "provisioning"]] = None
    productID: Optional[str] = None
    productName: Optional[str] = None
    productVersion: Optional[str] = None
    percentComplete: Optional[int] = None
    isCallable: Optional[bool] = None
    containsParallelSteps: Optional[bool] = None
    scope: Optional[Literal["system", "sysplex", "none"]] = None
    statusName: Optional[Literal["in-progress", "complete", "automation-in-progress", "canceled"]] = None
    deleteCompletedJobs: Optional[bool] = None
    automationStatus: Optional['WorkflowAutomationStatusResponse'] = None
    autoDeleteOnCompletion: Optional[bool] = None
    access: Optional[Literal["Public", "Restricted", "Private"]] = None
    accountInfo: Optional[str] = None
    jobStatement: Optional[str] = None
    templateID: Optional[str] = None
    actionID: Optional[str] = None
    registryID: Optional[str] = None
    parentRegistryID: Optional[str] = None
    domainID: Optional[str] = None
    tenantID: Optional[str] = None
    software_service_instance_name: Optional[str] = None
    templateName: Optional[str] = None
    globalVariableGroup: Optional[str] = None
    isInstanceVariableWithoutPrefix: Optional[bool] = None
    steps: Optional[list['WorkflowStepResponse']] = None
    variables: Optional[list['WorkflowVariableResponse']] = None

    def __init__(self, response: dict[str, Any]) -> None:
        for k, value in response.items():
            key = k.replace("-", "_")
            if key == "automationStatus":
                value = WorkflowAutomationStatusResponse(value) if not value == None else None
            elif key == "steps":
                value = [WorkflowStepResponse(x) for x in value] if not value == None else None
            elif key == "variables":
                value = [WorkflowVariableResponse(x) for x in value] if not value == None else None
            super().__setattr__(key, value)

    def __getitem__(self, key: str) -> Any:
        return self.__dict__[key.replace("-", "_")]

    def __setitem__(self, key: str, value: Any) -> None:
        self.__dict__[key.replace("-", "_")] = value

@dataclass
class WorkflowAutomationStatusResponse:
    """
    An automation-info object that contains details about the most recent start automation request for the workflow.
    The content of this property depends on the following factors:
    - If no automation was performed for the workflow, this property is null.
    - If automation processing is still in progress, this property indicates the step that is being processed.
    - If automation was restarted after it was stopped, this property indicates the status of
      the current start automation request.
    - If automation is stopped and the workflow status is complete, this property indicates
      that automation is completed.
    - If automation is stopped and the workflow status is not complete, this property identifies the step
      that is most closely related to the reason why automation was stopped.

    For more information:
    - [Response content: automationStatus](https://www.ibm.com/docs/en/zos/3.1.0?topic=services-get-properties-workflow#GETMethodRetrieveInformationAboutWF__ResponseBodyGetProperties__entry__1)
    - [Response content: Format of the automation-info object](https://www.ibm.com/docs/en/zos/3.1.0?topic=services-get-properties-workflow#GETMethodRetrieveInformationAboutWF__ResponseBodyGetPropertiesAutomation)

    Parameters
    ----------
    startUser: Optional[str]
        User ID of the user who initiated the automation processing.
    startedTime: Optional[str]
        Time that automation processing started.
    stoppedTime: Optional[str]
        Time that automation processing stopped.
    currentStepName: Optional[str]
        Indicates the current step name.
    currentStepNumber: Optional[str]
        The step number.
    currentStepTitle: Optional[str]
        Step title.
    messageID: Optional[str]
        Message identifier for the accompanying message.
    messageText: Optional[str]
        Message text that describes the reason that automation is stopped.
    """

    startUser: Optional[str] = None
    startedTime: Optional[str] = None
    stoppedTime: Optional[str] = None
    currentStepName: Optional[str] = None
    currentStepNumber: Optional[str] = None
    currentStepTitle: Optional[str] = None
    messageID: Optional[str] = None
    messageText: Optional[str] = None

    def __init__(self, response: dict[str, Any]) -> None:
        for key, value in response.items():
            super().__setattr__(key, value)

    def __getitem__(self, key: str) -> Any:
        return self.__dict__[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.__dict__[key] = value

@dataclass
class WorkflowStepResponse:
    """
    A step-info object that contains details about a specific step of the workflow.

    For more information:
    - [Get the properties of a workflow: Effects of access type on the returned data](https://www.ibm.com/docs/en/zos/3.1.0?topic=services-get-properties-workflow#GETMethodRetrieveInformationAboutWF__ConsiderationsForAccessType__title__1)
    - [Get Workflow Properties request: Format of the step-info object](https://www.ibm.com/docs/en/zos/3.1.0?topic=services-get-properties-workflow#GETMethodRetrieveInformationAboutWF__ResponseBodyGetPropertiesSteps)

    Parameters
    ----------
    name: Optional[str]
        (All step types) Name of the step.
    actualStatusCode: Optional[str]
        (REST steps only) The actual HTTP status code that is received from the REST API request.
    assignees: Optional[list[str]]
        (Calling steps and template steps) One or more user IDs that are assigned to the step.
    autoEnable: Optional[bool]
        (All step types) Indicates whether the step can be performed automatically when all prerequisite
        steps are completed, and no user inputs are required.
    calledInstanceKey: Optional[str]
        (Calling steps only) For a step that calls another workflow for execution,
        this property contains the key of the called workflow instance.
    calledInstanceScope: Optional[str]
        (Calling steps only) For a step that calls another workflow for execution,
        this property contains the scope of the called workflow instance.
    calledInstanceURI: Optional[str]
        (Calling steps only) For a step that calls another workflow for execution,
        this property contains the URI path of the called workflow instance.
    calledWorkflowID: Optional[str]
        (Calling steps only) Specifies the workflow ID of a workflow definition file.
    calledWorkflowVersion: Optional[str]
        (Calling steps only) Specifies the workflow version of a workflow definition file.
    calledWorkflowMD5: Optional[str]
        (Calling steps only) Specifies the 128-bit hash value of a workflow definition file.
    calledWorkflowDescription: Optional[str]
        (Calling steps only) Describes the workflow to be called, from the point of view of the calling workflow.
    calledWorkflowDefinitionFile: Optional[str]
        (Calling steps only) Specifies the name of the workflow definition file that is used to create a new workflow
        if an existing instance is not found when this step is performed.
    description: Optional[str]
        (All step types) Step description.
    expectedStatusCode: Optional[str]
        (REST steps only) The expected HTTP status code from the REST API request.
    failedPattern: Optional[list[str]]
        (Template steps only) Optional regular expression that can be returned for program execution failures.
    hasCalledWorkflow: Optional[bool]
        (Calling steps and template steps) Indicates whether this step calls another workflow.
    hostname: Optional[str]
        (REST steps only) Indicates the hostname or IP address of the site to which the REST request is directed.
    httpMethod: Optional[Literal["GET", "PUT", "POST", "DELETE"]]
        (REST steps only) Indicates the HTTP method that is used for issuing the REST API request.
    instructions: Optional[str]
        (Template steps only) Detailed instructions on what the user must do to perform the step.
    instructionsSub: Optional[bool]
        (Template steps only) Indicates whether the step instructions contain variables.
    isConditionStep: Optional[bool]
        (Calling steps and template steps) Indicates whether this step is a conditional step.
    isRestStep: Optional[bool]
        (All step types) Indicates whether this step is a REST API step.
    jobInfo: Optional['WorkflowJobInfoResponse']
        (Template steps only) For a step that submits a job, this property contains the jobInfo object,
        which contains details about the job.
    maxLrecl: Optional[int]
        (Template steps only) For a step that submits a job, this value specifies the maximum record length,
        in bytes, for the input data for the job.
    optional: Optional[bool]
        (All step types) Indicates whether the step is optional.
    output: Optional[str]
        (Template steps only) Indicates the name of the output file that is produced
        by the step (a data set or UNIX file).
    outputSub: Optional[bool]
        (Template steps only) Indicates whether the output file name contains variable substitution.
    outputVariablesPrefix: Optional[str]
        (Template steps only) For a step that creates a variable, this property contains a prefix
        that identifies a string as a variable.
    owner: Optional[str]
        (Calling steps and template steps) User ID of the step owner.
    port: Optional[str]
        (REST steps only) Port number that is associated with the REST request.
    portSub: Optional[bool]
        (REST steps only) Indicates whether the port number contains variable substitution.
    prereqStep: Optional[list[str]]
        (All step types) Lists the names of the steps that must be completed before this step can be performed.
    procName: Optional[str]
        (Template steps only) For a step that runs a program under TSO/E, this property contains the name
        of the logon procedure that is used to log into the TSO/E address space.
    queryParameters: Optional[str]
        (REST steps only) For a REST request that includes query parameters,
        this property contains the query parameters.
    queryParametersSub: Optional[bool]
        (REST steps only) Indicates whether the query parameters contain variable substitution.
    regionSize: Optional[str]
        (Template steps only) For a step that runs a program under TSO/E,
        this property contains the region size for the TSO/E address space.
    requestBody: Optional[str]
        (REST steps only) For a REST request that includes a request body, this property contains the request body.
    requestBodySub: Optional[bool]
        (REST steps only) Indicates whether the request body variable substitution.
    returnCode: Optional[str]
        (Template steps only) For a step that submits a job to run,
        this property indicates the return code that was returned when the job was submitted.
    runAsUser: Optional[str]
        (All step types) The user ID under which the step is to be performed (the runAsUser ID).
    runAsUserDynamic: Optional[bool]
        (All step types) Indicates whether the runAsUser ID value can change.
    saveAsDataset: Optional[str]
        (Template steps only) Data set name (fully qualified, no quotation marks) that contains the saved JCL.
    saveAsDatasetSub: Optional[bool]
        (Template steps only) Indicates whether the data set name contains variable substitution.
    saveAsUnixFile: Optional[str]
        (Template steps only) UNIX file name (absolute name) that contains the saved JCL.
    saveAsUnixFileSub: Optional[bool]
        (Template steps only) Indicates whether the UNIX file name contains variable substitution.
    schemeName: Optional[str]
        (REST steps only) The scheme name that is used for the REST request. For example: http.
    schemeNameSub: Optional[bool]
        (REST steps only) Indicates whether the scheme name contains variable substitution.
    scriptParameters: Optional[list[str]]
        (Template steps only) For a step that runs a program,
        this property contains the input parameters that can be set by the step owner.
    skills: Optional[str]
        (Calling steps and template steps) The type of skills that are required to perform the step.
    state: Optional[Literal["Unassigned", "Assigned", "Not Ready", "Ready", "In Progress", "Submitted", "Complete", "Skipped", "Complete (Override)", "Failed", "Conflicts", "Condition Not Satisfied"]]
        (All step types) State of the step.
    stepNumber: Optional[str]
        (All step types) The step number.
    steps: Optional[list['WorkflowStepResponse']]
        (All step types) For a parent step, this is a nested array of step-info objects.
    submitAs: Optional[Literal["JCL", "TSO-REXX", "shell-JCL", "TSO-REXX-JCL", "TSO-UNIX-REXX", "TSO-UNIX-shell"]]
        (Template steps only) Indicates the type of executable program.
    successPattern: Optional[str]
        (Template steps only) Regular expression that is returned for a successful program execution.
    template: Optional[str]
        (Template steps only) Indicates the template that is used to run a program
        or batch job (inline or external file).
    templateSub: Optional[bool]
        (Template steps only) Indicates whether template contains variable substitution.
    timeout: Optional[str]
        (Template steps only) For a step that runs a REXX exec or UNIX shell script,
        this property contains the maximum amount of time that the program can run before
        it is ended by a timeout condition.
    title: Optional[str]
        (All step types) Step title.
    uriPath: Optional[str]
        (REST steps only) The URI path to use for the REST request.
    uriPathSub: Optional[bool]
        (REST steps only) Indicates whether the URI path contains variable substitution.
    userDefined: Optional[bool]
        (All step types) Indicates whether the step was added manually to the workflow.
    variable_references: Optional[list['WorkflowVariableReferenceResponse']]
        (Template steps only) An array of WorkflowVariableReferenceResponse objects
    weight: Optional[int]
        (Calling steps and template steps) The relative difficulty of the step compared to other steps
        within this workflow (an integer value 1 - 1000).
    """

    name: Optional[str] = None
    actualStatusCode: Optional[str] = None
    assignees: Optional[list[str]] = None
    autoEnable: Optional[bool] = None
    calledInstanceKey: Optional[str] = None
    calledInstanceScope: Optional[str] = None
    calledInstanceURI: Optional[str] = None
    calledWorkflowID: Optional[str] = None
    calledWorkflowVersion: Optional[str] = None
    calledWorkflowMD5: Optional[str] = None
    calledWorkflowDescription: Optional[str] = None
    calledWorkflowDefinitionFile: Optional[str] = None
    description: Optional[str] = None
    expectedStatusCode: Optional[str] = None
    failedPattern: Optional[list[str]] = None
    hasCalledWorkflow: Optional[bool] = None
    hostname: Optional[str] = None
    httpMethod: Optional[Literal["GET", "PUT", "POST", "DELETE"]] = None
    instructions: Optional[str] = None
    instructionsSub: Optional[bool] = None
    isConditionStep: Optional[bool] = None
    isRestStep: Optional[bool] = None
    jobInfo: Optional['WorkflowJobInfoResponse'] = None
    maxLrecl: Optional[int] = None
    optional: Optional[bool] = None
    output: Optional[str] = None
    outputSub: Optional[bool] = None
    outputVariablesPrefix: Optional[str] = None
    owner: Optional[str] = None
    port: Optional[str] = None
    portSub: Optional[bool] = None
    prereqStep: Optional[list[str]] = None
    procName: Optional[str] = None
    queryParameters: Optional[str] = None
    queryParametersSub: Optional[bool] = None
    regionSize: Optional[str] = None
    requestBody: Optional[str] = None
    requestBodySub: Optional[bool] = None
    returnCode: Optional[str] = None
    runAsUser: Optional[str] = None
    runAsUserDynamic: Optional[bool] = None
    saveAsDataset: Optional[str] = None
    saveAsDatasetSub: Optional[bool] = None
    saveAsUnixFile: Optional[str] = None
    saveAsUnixFileSub: Optional[bool] = None
    schemeName: Optional[str] = None
    schemeNameSub: Optional[bool] = None
    scriptParameters: Optional[list[str]] = None
    skills: Optional[str] = None
    state: Optional[Literal["Unassigned", "Assigned", "Not Ready", "Ready", "In Progress", "Submitted", "Complete", "Skipped", "Complete (Override)", "Failed", "Conflicts", "Condition Not Satisfied"]] = None
    stepNumber: Optional[str] = None
    steps: Optional[list['WorkflowStepResponse']] = None
    submitAs: Optional[Literal["JCL", "TSO-REXX", "shell-JCL", "TSO-REXX-JCL", "TSO-UNIX-REXX", "TSO-UNIX-shell"]] = None
    successPattern: Optional[str] = None
    template: Optional[str] = None
    templateSub: Optional[bool] = None
    timeout: Optional[str] = None
    title: Optional[str] = None
    uriPath: Optional[str] = None
    uriPathSub: Optional[bool] = None
    userDefined: Optional[bool] = None
    variable_references: Optional[list['WorkflowVariableReferenceResponse']] = None
    weight: Optional[int] = None

    def __init__(self, response: dict[str, Any]) -> None:
        for k, value in response.items():
            key = k.replace("-", "_")
            if key == "assignees":
                value = [x.strip() for x in value.split(",") if x.strip()] if not value == None else None
            elif key == "jobInfo":
                value = WorkflowJobInfoResponse(value) if not value == None else None
            elif key == "steps":
                value = [WorkflowStepResponse(x) for x in value] if not value == None else None
            elif key == "variable_references":
                value = [WorkflowVariableReferenceResponse(x) for x in value] if not value == None else None
            super().__setattr__(key, value)

    def __getitem__(self, key: str) -> Any:
        return self.__dict__[key.replace("-", "_")]

    def __setitem__(self, key: str, value: Any) -> None:
        self.__dict__[key.replace("-", "_")] = value

@dataclass
class WorkflowJobInfoResponse:
    """
    Object, which contains details about the job for a specific step.

    For more information:
    - [Get Workflow Properties request: Format of the jobInfo object](https://www.ibm.com/docs/en/zos/3.1.0?topic=services-get-properties-workflow#GETMethodRetrieveInformationAboutWF__table_jobInfoObject)

    Parameters
    ----------
    jobstatus: Optional['WorkflowJobStatusResponse']
        Contains the WorkflowJobStatusResponse object, which contains details about the job.
    jobfiles: Optional[list['WorkflowJobFileResponse']]
        Contains an array of one or more objects that contain details
        about each of the files that are created by the job.
    """

    jobstatus: Optional['WorkflowJobStatusResponse'] = None
    jobfiles: Optional[list['WorkflowJobFileResponse']] = None

    def __init__(self, response: dict[str, Any]) -> None:
        for key, value in response.items():
            if key == "jobstatus":
                value = WorkflowJobStatusResponse(value) if not value == None else None
            elif key == "jobfiles":
                value = [WorkflowJobFileResponse(x) for x in value] if not value == None else None
            super().__setattr__(key, value)

    def __getitem__(self, key: str) -> Any:
        return self.__dict__[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.__dict__[key] = value

@dataclass
class WorkflowJobStatusResponse:
    """
    TODO: this class is very similar to the JobResponse class from zos_jobs_for_zowe_sdk.
    It is better to consider their merging.

    Contains details about the job.

    For more information:
    - [Get Workflow Properties request: Format of the jobstatus object](https://www.ibm.com/docs/en/zos/3.1.0?topic=services-get-properties-workflow#GETMethodRetrieveInformationAboutWF__table_jobstatus)

    Parameters
    ----------
    retcode: Optional[str]
        Job completion code.
    jobname: Optional[str]
        Job name.
    status: Optional[Literal["INPUT", "ACTIVE", "OUTPUT"]]
        Job status.
    owner: Optional[str]
        The z/OS® user ID associated with the job.
    subsystem: Optional[str]
        The primary or secondary JES subsystem.
    job_class: Optional[str]
        Job execution class.
    type: Optional[Literal["JOB", "STC", "TSU"]]
        Job type.
    jobid: Optional[str]
        Job identifier.
    """

    retcode: Optional[str] = None
    jobname: Optional[str] = None
    status: Optional[Literal["INPUT", "ACTIVE", "OUTPUT"]] = None
    owner: Optional[str] = None
    subsystem: Optional[str] = None
    job_class: Optional[str] = None
    type: Optional[Literal["JOB", "STC", "TSU"]] = None
    jobid: Optional[str] = None

    def __init__(self, response: dict[str, Any]) -> None:
        for key, value in response.items():
            if key == "class":
                key = "job_class"
            super().__setattr__(key, value)

    def __getitem__(self, key: str) -> Any:
        if key == "class":
            key = "job_class"
        return self.__dict__[key]

    def __setitem__(self, key: str, value: Any) -> None:
        if key == "class":
            key = "job_class"
        self.__dict__[key] = value

@dataclass
class WorkflowJobFileResponse:
    """
    Contains details about a file that is created by a job.

    For more information:
    - [Get Workflow Properties request: Format of the jobfiles object](https://www.ibm.com/docs/en/zos/3.1.0?topic=services-get-properties-workflow#GETMethodRetrieveInformationAboutWF__table_jobfiles_object)

    Parameters
    ----------
    id: Optional[int]
        Data set number (key).
    ddname: Optional[str]
        DDNAME for the data set creation.
    byte_count: Optional[int]
        Number of bytes on spool that is consumed by the spool file. The value can be zero (0).
    record_count: Optional[int]
        Number of records in the spool file. The value can be zero (0).
    job_class: Optional[str]
        Class that is assigned to the spool file.
    stepname: Optional[str]
        Step name for the step that created this data set.
    procstep: Optional[str]
        Procedure name for the step that created this data set.
    """

    id: Optional[int] = None
    ddname: Optional[str] = None
    byte_count: Optional[int] = None
    record_count: Optional[int] = None
    job_class: Optional[str] = None
    stepname: Optional[str] = None
    procstep: Optional[str] = None

    def __init__(self, response: dict[str, Any]) -> None:
        for k, value in response.items():
            key = k.replace("-", "_")
            if key == "class":
                key = "job_class"
            super().__setattr__(key, value)

    def __getitem__(self, key: str) -> Any:
        if key == "class":
            key = "job_class"
        return self.__dict__[key.replace("-", "_")]

    def __setitem__(self, key: str, value: Any) -> None:
        if key == "class":
            key = "job_class"
        self.__dict__[key.replace("-", "_")] = value

@dataclass
class WorkflowVariableReferenceResponse:
    """
    For more information:
    - [Get Workflow Properties request: Format of the variable-reference object](https://www.ibm.com/docs/en/zos/3.1.0?topic=services-get-properties-workflow#GETMethodRetrieveInformationAboutWF__ResponseBodyGetPropertiesVarRef)

    Parameters
    ----------
    name: Optional[str]
        Name of the variable.
    scope: Optional[Literal["instance", "global"]]
        Variable scope.
    """

    name: Optional[str] = None
    scope: Optional[Literal["instance", "global"]] = None

    def __init__(self, response: dict[str, Any]) -> None:
        for key, value in response.items():
            super().__setattr__(key, value)

    def __getitem__(self, key: str) -> Any:
        return self.__dict__[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.__dict__[key] = value

@dataclass
class WorkflowVariableResponse:
    """
    Contains details about a variable that is used in a workflow.

    For more information:
    - [Get Workflow Properties request: Format of the variable-info object](https://www.ibm.com/docs/en/zos/3.1.0?topic=services-get-properties-workflow#GETMethodRetrieveInformationAboutWF__ResponseBodyGetPropertiesVars)

    Parameters
    ----------
    name: Optional[str]
        Name of the variable.
    scope: Optional[Literal["instance", "global"]]
        Variable scope.
    type: Optional[Literal["boolean", "string", "number", "date", "time", "array"]]
        Type of variable.
    value: Optional[str]
        Variable value.
    visibility: Optional[Literal["public", "private"]]
        Public or private.
    """

    name: Optional[str] = None
    scope: Optional[Literal["instance", "global"]] = None
    type: Optional[Literal["boolean", "string", "number", "date", "time", "array"]] = None
    value: Optional[str] = None
    visibility: Optional[Literal["public", "private"]] = None

    def __init__(self, response: dict[str, Any]) -> None:
        for key, value in response.items():
            super().__setattr__(key, value)

    def __getitem__(self, key: str) -> Any:
        return self.__dict__[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.__dict__[key] = value

@dataclass
class ListWorkflowsResponse:
    """
    Workflow definition, returned by z/OSMF on "list workflows" request.
    See more at: [List workflows request: Format of the workflow-info object](https://www.ibm.com/docs/en/zos/3.1.0?topic=services-list-workflows-system-sysplex#GETMethodListWorkflows__ResponseBodyListWorkflows)

    Parameters
    ----------
    workflowName: Optional[str]
        Descriptive name for the workflow.
    workflowKey: Optional[str]
        Workflow key. A string value, which is generated by z/OSMF to uniquely identify the workflow instance.
    workflowDescription: Optional[str]
        Workflow description.
    workflowID: Optional[str]
        Workflow ID. A short, arbitrary value that identifies the workflow.
    workflowVersion: Optional[str]
        Version of the workflow definition file.
    workflowDefinitionFileMD5Value: Optional[str]
        The 128-bit hash value that is associated with the workflow definition file that was used 
        to create the workflow.
    instanceURI: Optional[str]
        Workflow instance URI path, which you can use to retrieve information about the workflow.
    owner: Optional[str]
        User ID of the workflow owner.
    vendor: Optional[str]
        Name of the vendor that provided the workflow definition file.
    access: Optional[Literal["Public", "Restricted", "Private"]]
        Specifies the access type for the workflow.
    """

    workflowName: Optional[str] = None
    workflowKey: Optional[str] = None
    workflowDescription: Optional[str] = None
    workflowID: Optional[str] = None
    workflowVersion: Optional[str] = None
    workflowDefinitionFileMD5Value: Optional[str] = None
    instanceURI: Optional[str] = None
    owner: Optional[str] = None
    vendor: Optional[str] = None
    access: Optional[Literal["Public", "Restricted", "Private"]] = None

    def __init__(self, response: dict[str, Any]) -> None:
        for key, value in response.items():
            super().__setattr__(key, value)

    def __getitem__(self, key: str) -> Any:
        return self.__dict__[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.__dict__[key] = value

@dataclass
class GetWorkflowDefinitionResponse:
    """
    Workflow definition, returned by z/OSMF on "list workflows" request.
    See more at: [Retrieve a workflow definition: JSON object that is returned to a retrieve a workflow definition request](https://www.ibm.com/docs/en/zos/3.1.0?topic=services-retrieve-workflow-definition#GETMethodRetrieveWorkflowDefinition__ResponseBodyGetTemplate)

    Parameters
    ----------
    workflowDefaultName: Optional[str]
        Identifies the default name for the workflow.
    workflowDescription: Optional[str]
        Description of the workflow.
    workflowID: Optional[str]
        Workflow ID. A short, arbitrary value that identifies the workflow.
    workflowVersion: Optional[str]
        Version of the workflow definition file.
    vendor: Optional[str]
        Name of the vendor that provided the workflow definition file.
    workflowDefinitionFileMD5Value: Optional[str]
        A 128-bit hash value that z/OSMF generates to uniquely identify the workflow definition file.
    isCallable: Optional[Literal["system", "sysplex"]]
        Indicates the callable scope for the workflow.
    containsParallelSteps: Optional[bool]
    	For a workflow with automated steps, this property indicates whether the automated steps 
        can be run in parallel (concurrently).
    scope: Optional[Literal["system", "sysplex", "none"]]
        Indicates the singleton scope for the workflow.
    jobsOutputDirectory: Optional[str]
        Name of the UNIX directory that is used for automatically saving job spool files from the workflow.
    category: Optional[Literal["general", "configuration", "provisioning"]]
        Category of the workflow.
    productID: Optional[str]
        Identifier of the product or component that is being configured through the workflow, 
        such as the product identifier (PID) or function modification identifier (FMID).
    productName: Optional[str]
        Name of the product or component that is being configured through the workflow.
    productVersion: Optional[str]
        Version and release of the product or component that is configured through the workflow.
    globalVariableGroup: Optional[str]
    	Global variable group for the workflow.
    isInstanceVariableWithoutPrefix: Optional[bool]
        Indicates whether the simplified format is used for references to instance variables.
    steps: Optional[list['WorkflowDefinitionStepResponse']]
        Array of one or more step-definition objects that contain details about each of the steps 
        in the workflow definition file.
    variables: Optional[list['WorkflowDefinitionVariableResponse']]
        Array of one or more variable-definition objects that contain details about the variables 
        that are defined or referenced in the workflow definition file.
    """

    workflowDefaultName: Optional[str] = None
    workflowDescription: Optional[str] = None
    workflowID: Optional[str] = None
    workflowVersion: Optional[str] = None
    vendor: Optional[str] = None
    workflowDefinitionFileMD5Value: Optional[str] = None
    isCallable: Optional[Literal["system", "sysplex"]] = None
    containsParallelSteps: Optional[bool] = None
    scope: Optional[Literal["system", "sysplex", "none"]] = None
    jobsOutputDirectory: Optional[str] = None
    category: Optional[Literal["general", "configuration", "provisioning"]] = None
    productID: Optional[str] = None
    productName: Optional[str] = None
    productVersion: Optional[str] = None
    globalVariableGroup: Optional[str] = None
    isInstanceVariableWithoutPrefix: Optional[bool] = None
    steps: Optional[list['WorkflowDefinitionStepResponse']] = None
    variables: Optional[list['WorkflowDefinitionVariableResponse']] = None

    def __init__(self, response: dict[str, Any]) -> None:
        for key, value in response.items():
            if key == "steps":
                value = [WorkflowDefinitionStepResponse(x) for x in value] if not value == None else None
            elif key == "variables":
                value = [WorkflowDefinitionVariableResponse(x) for x in value] if not value == None else None
            super().__setattr__(key, value)

    def __getitem__(self, key: str) -> Any:
        return self.__dict__[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.__dict__[key] = value

@dataclass
class WorkflowDefinitionStepResponse:
    """
    A step-info object that contains details about a specific step of the workflow.

    For more information:
    - [Get the properties of a workflow: Effects of access type on the returned data](https://www.ibm.com/docs/en/zos/3.1.0?topic=services-get-properties-workflow#GETMethodRetrieveInformationAboutWF__ConsiderationsForAccessType__title__1)
    - [Retrieve a workflow definition: Format of the step-definition object](https://www.ibm.com/docs/en/zos/3.1.0?topic=services-retrieve-workflow-definition#GETMethodRetrieveWorkflowDefinition__stepdefinitionobject__title__1)

    Parameters
    ----------
    name: Optional[str]
        (All step types) Name of the step.
    title: Optional[str]
        (All step types) Step title.
    description: Optional[str]
        (All step types) Step description.
    prereqStep: Optional[list[str]]
        (All step types) Lists the names of the steps that must be completed before this step can be performed.
    optional: Optional[bool]
        (All step types) Indicates whether the step is optional.
    steps: Optional[list['WorkflowDefinitionStepResponse']]
        (All step types) For a parent step, this is a nested array of step-info objects.
    calledWorkflowDescription: Optional[str]
        (Calling steps only) Describes the workflow to be called, from the point of view of the calling workflow.
    calledWorkflowID: Optional[str]
        (Calling steps only) Specifies the workflow ID of a workflow definition file.
    calledWorkflowMD5: Optional[str]
        (Calling steps only) Specifies the 128-bit hash value of a workflow definition file.
    calledWorkflowDefinitionFile: Optional[str]
        (Calling steps only) Specifies the name of the workflow definition file that is used to create a new workflow
        if an existing instance is not found when this step is performed.
    calledWorkflowVersion: Optional[str]
        (Calling steps only) Specifies the workflow version of a workflow definition file.
    callingStepAutoEnable: Optional[bool]
        (Calling steps only) Specifies whether the step is to be performed automatically 
        when all prerequisite steps are completed, and no user inputs are required
    callingStepWeight: Optional[int]
        (Calling steps only) Specifies the relative difficulty of the step compared to other steps 
        within this workflow (an integer value 1 - 1000).
    callingStepSkills: Optional[str]
        (Calling steps only) Specifies the type of skills that are required to perform the step.
    actualStatusCode: Optional[str]
        (REST steps only) The actual HTTP status code that is received from the REST API request.
    approvers: Optional[list['WorkflowDefinitionApproverResponse']]
        (All step types) An array of WorkflowDefinitionApproverResponse objects
    autoEnable: Optional[bool]
        (All step types) Indicates whether the step can be performed automatically when all prerequisite
        steps are completed, and no user inputs are required.
    expectedStatusCode: Optional[str]
        (REST steps only) The expected HTTP status code from the REST API request.
    failedPattern: Optional[list[str]]
        (Template steps only) Optional regular expression that can be returned for program execution failures.
    hostname: Optional[str]
        (REST steps only) Indicates the hostname or IP address of the site to which the REST request is directed.
    httpMethod: Optional[Literal["GET", "PUT", "POST", "DELETE"]]
        (REST steps only) Indicates the HTTP method that is used for issuing the REST API request.
    instructions: Optional[str]
        (All step types) Detailed instructions on what the user must do to perform the step.
    isRestStep: Optional[bool]
        (All step types) Indicates whether this step is a REST API step.
    maxLrecl: Optional[int]
        (Template steps only) For a step that submits a job, this value specifies the maximum record length,
        in bytes, for the input data for the job.
    output: Optional[str]
        (Template steps only) Indicates the name of the output file that is produced
        by the step (a data set or UNIX file).
    outputVariablesPrefix: Optional[str]
        (Template steps only) For a step that creates a variable, this property contains a prefix
        that identifies a string as a variable.
    port: Optional[str]
        (REST steps only) Port number that is associated with the REST request.
    procName: Optional[str]
        (Template steps only) For a step that runs a program under TSO/E, this property contains the name
        of the logon procedure that is used to log into the TSO/E address space.
    propertyMappings: Optional[list['WorkflowPropertyMappingResponse']]
        (REST steps only) An array of WorkflowPropertyMappingResponse objects.
    queryParameters: Optional[str]
        (REST steps only) For a REST request that includes query parameters,
        this property contains the query parameters.
    regionSize: Optional[str]
        (Template steps only) For a step that runs a program under TSO/E,
        this property contains the region size for the TSO/E address space.
    requestBody: Optional[str]
        (REST steps only) For a REST request that includes a request body, this property contains the request body.
    saveAsDataset: Optional[str]
        (Template steps only) Data set name (fully qualified, no quotation marks) that contains the saved JCL.
    saveAsUnixFile: Optional[str]
        (Template steps only) UNIX file name (absolute name) that contains the saved JCL.
    schemeName: Optional[str]
        (REST steps only) The scheme name that is used for the REST request. For example: http.
    scriptParameters: Optional[list[str]]
        (Template steps only) For a step that runs a program,
        this property contains the input parameters that can be set by the step owner.
    skills: Optional[str]
        (All step types) The type of skills that are required to perform the step.
    submitAs: Optional[Literal["JCL", "TSO-REXX", "shell-JCL", "TSO-REXX-JCL", "TSO-UNIX-REXX", "TSO-UNIX-shell"]]
        (Template steps only) Indicates the type of executable program.
    successPattern: Optional[str]
        (Template steps only) Regular expression that is returned for a successful program execution.
    template: Optional[str]
        (Template steps only) Indicates the template that is used to run a program
        or batch job (inline or external file).
    timeout: Optional[str]
        (Template steps only) For a step that runs a REXX exec or UNIX shell script,
        this property contains the maximum amount of time that the program can run before
        it is ended by a timeout condition.
    uriPath: Optional[str]
        (REST steps only) The URI path to use for the REST request.
    variable_specifications: Optional[list['WorkflowVariableSpecificationResponse']]
        (All step types) An array of WorkflowVariableSpecificationResponse objects
    weight: Optional[int]
        (All step types) The relative difficulty of the step compared to other steps
        within this workflow (an integer value 1 - 1000).
    """

    name: Optional[str] = None
    title: Optional[str] = None
    description: Optional[str] = None
    prereqStep: Optional[list[str]] = None
    optional: Optional[bool] = None
    steps: Optional[list['WorkflowDefinitionStepResponse']] = None
    calledWorkflowDescription: Optional[str] = None
    calledWorkflowID: Optional[str] = None
    calledWorkflowMD5: Optional[str] = None
    calledWorkflowDefinitionFile: Optional[str] = None
    calledWorkflowVersion: Optional[str] = None
    callingStepAutoEnable: Optional[bool] = None
    callingStepWeight: Optional[int] = None
    callingStepSkills: Optional[str] = None
    actualStatusCode: Optional[str] = None
    approvers: Optional[list['WorkflowDefinitionApproverResponse']] = None
    autoEnable: Optional[bool] = None
    expectedStatusCode: Optional[str] = None
    failedPattern: Optional[list[str]] = None
    hostname: Optional[str] = None
    httpMethod: Optional[Literal["GET", "PUT", "POST", "DELETE"]] = None
    instructions: Optional[str] = None
    isRestStep: Optional[bool] = None
    maxLrecl: Optional[int] = None
    output: Optional[str] = None
    outputVariablesPrefix: Optional[str] = None
    port: Optional[str] = None
    procName: Optional[str] = None
    propertyMappings: Optional[list['WorkflowPropertyMappingResponse']] = None
    queryParameters: Optional[str] = None
    regionSize: Optional[str] = None
    requestBody: Optional[str] = None
    saveAsDataset: Optional[str] = None
    saveAsUnixFile: Optional[str] = None
    schemeName: Optional[str] = None
    scriptParameters: Optional[list[str]] = None
    skills: Optional[str] = None
    submitAs: Optional[Literal["JCL", "TSO-REXX", "shell-JCL", "TSO-REXX-JCL", "TSO-UNIX-REXX", "TSO-UNIX-shell"]] = None
    successPattern: Optional[str] = None
    template: Optional[str] = None
    timeout: Optional[str] = None
    uriPath: Optional[str] = None
    variable_specifications: Optional[list['WorkflowVariableSpecificationResponse']] = None
    weight: Optional[int] = None

    def __init__(self, response: dict[str, Any]) -> None:
        for k, value in response.items():
            key = k.replace("-", "_")
            if key == "approvers":
                value = [WorkflowDefinitionApproverResponse(x) for x in value] if not value == None else None
            elif key == "propertyMappings":
                value = [WorkflowPropertyMappingResponse(x) for x in value] if not value == None else None
            elif key == "steps":
                value = [WorkflowDefinitionStepResponse(x) for x in value] if not value == None else None
            elif key == "variable_specifications":
                value = [WorkflowVariableSpecificationResponse(x) for x in value] if not value == None else None
            super().__setattr__(key, value)

    def __getitem__(self, key: str) -> Any:
        return self.__dict__[key.replace("-", "_")]

    def __setitem__(self, key: str, value: Any) -> None:
        self.__dict__[key.replace("-", "_")] = value

@dataclass
class WorkflowDefinitionApproverResponse:
    """
    Approver object that provides info about approvers for a step.

    Parameters
    ----------
    approver: Optional[list[str]]
        One or more user IDs that are separated by spaces and can provide approval.
    approverSub: Optional[bool]
        This can be set to true or false regardless of whether the approver field uses substitution.
    """

    approver: Optional[list[str]] = None
    approverSub: Optional[bool] = None

    def __init__(self, response: dict[str, Any]) -> None:
        for key, value in response.items():
            if key == "approver":
                value = [x.strip() for x in value.split(",") if x.strip()] if not value == None else None
            super().__setattr__(key, value)

    def __getitem__(self, key: str) -> Any:
        return self.__dict__[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.__dict__[key] = value

@dataclass
class WorkflowPropertyMappingResponse:
    """
    Property mapping object.

    Parameters
    ----------
    mapFrom: Optional[str]
        Is the property from the REST request.
    mapTo: Optional[str]
        Is the workflow variable that is assigned the value from "mapFrom" property.
    """

    mapFrom: Optional[str] = None
    mapTo: Optional[str] = None

    def __init__(self, response: dict[str, Any]) -> None:
        for key, value in response.items():
            super().__setattr__(key, value)

    def __getitem__(self, key: str) -> Any:
        return self.__dict__[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.__dict__[key] = value

@dataclass
class WorkflowVariableSpecificationResponse:
    """
    variable-specification-info object.

    For more information:
    - [Format of the variable-specification-info object](https://www.ibm.com/docs/en/zos/3.1.0?topic=services-retrieve-workflow-definition#GETMethodRetrieveWorkflowDefinition__title__13)

    Parameters
    ----------
    name: Optional[str]
        Name of the variable.
    scope: Optional[Literal["instance", "global"]]
        Variable scope.
    required: Optional[bool]
        Indicates whether the variable is required.
    """

    name: Optional[str] = None
    scope: Optional[Literal["instance", "global"]] = None
    required: Optional[bool] = None

    def __init__(self, response: dict[str, Any]) -> None:
        for key, value in response.items():
            super().__setattr__(key, value)

    def __getitem__(self, key: str) -> Any:
        return self.__dict__[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.__dict__[key] = value

@dataclass
class WorkflowDefinitionVariableResponse:
    """
    Variable-definition that is defined or referenced in a workflow definition file.

    For more information:
    - [Format of the variable-definition object](https://www.ibm.com/docs/en/zos/3.1.0?topic=services-retrieve-workflow-definition#GETMethodRetrieveWorkflowDefinition__title__15)

    Parameters
    ----------
    name: Optional[str]
        Name of the variable.
    scope: Optional[Literal["instance", "global"]]
        Variable scope.
    abstract: Optional[str]
        A brief description of the variable.
    category: Optional[str]
        Name of the logical grouping to which the variable belongs.
    choice: Optional[list[str]]
        The choice value for the variable.
    decimalPlaces: Optional[int]
        Maximum number of decimal places that can be specified.
    default: Optional[str]
        Default value of the variable.
    description: Optional[str]
        Description of the variable.
    exposeToUser: Optional[bool]
        Indicates whether the variable is displayed to the user in the Workflows task.
    maxLength: Optional[int]
        Maximum length of the variable value.
    maxValue: Optional[str]
    	Maximum value of the variable.
    minLength: Optional[int]
        Minimum length of the variable value.
    minValue: Optional[str]
    	Minimum value of the variable.
    promptAtCreate: Optional[bool]
    	Indicates whether the user is prompted to specify a value for the variable during the create workflow process.
    regularExpression: Optional[str]
        Provides a standard regular expression that constrains the variable value, as an alternative 
        to the available validation types. 
    requiredAtCreate: Optional[bool]
        Indicates whether a value must be specified for the variable during the create workflow process.
    type: Optional[str]
        Type of variable.
    validationType: Optional[str]
        Specifies the validation type for the variable.
    valueMustBeChoice: Optional[bool]
        Indicates whether the variable value must come from the provided choices.
    visibility: Optional[Literal["public", "private"]]
        Indicates whether the variable is displayed to the Workflows task user.
    """

    name: Optional[str] = None
    scope: Optional[Literal["instance", "global"]] = None
    abstract: Optional[str] = None
    category: Optional[str] = None
    choice: Optional[list[str]] = None
    decimalPlaces: Optional[int] = None
    default: Optional[str] = None
    description: Optional[str] = None
    exposeToUser: Optional[bool] = None
    maxLength: Optional[int] = None
    maxValue: Optional[str] = None
    minLength: Optional[int] = None
    minValue: Optional[str] = None
    promptAtCreate: Optional[bool] = None
    regularExpression: Optional[str] = None
    requiredAtCreate: Optional[bool] = None
    type: Optional[str] = None
    validationType: Optional[str] = None
    valueMustBeChoice: Optional[bool] = None
    visibility: Optional[Literal["public", "private"]] = None

    def __init__(self, response: dict[str, Any]) -> None:
        for key, value in response.items():
            super().__setattr__(key, value)

    def __getitem__(self, key: str) -> Any:
        return self.__dict__[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.__dict__[key] = value

@dataclass
class ListArchivedWorkflowsResponse:
    """
    Workflow definition, returned by z/OSMF on "list archived workflows" request.
    See more at: [List archived workflows request: Format of the workflow-info object](https://www.ibm.com/docs/en/zos/3.1.0?topic=services-list-archived-workflows-system#GETMethodListArchivedWorkflows__ResponseBodyListWorkflows)

    Parameters
    ----------
    workflowName: Optional[str]
        Descriptive name for the workflow.
    workflowKey: Optional[str]
        Workflow key. A string value, which is generated by z/OSMF to uniquely identify the workflow instance.
    archivedInstanceURI: Optional[str]
        Workflow instance URI path, which you can use to retrieve information about the archived workflow.
    """

    workflowName: Optional[str] = None
    workflowKey: Optional[str] = None
    archivedInstanceURI: Optional[str] = None

    def __init__(self, response: dict[str, Any]) -> None:
        for key, value in response.items():
            super().__setattr__(key, value)

    def __getitem__(self, key: str) -> Any:
        return self.__dict__[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.__dict__[key] = value

@dataclass
class GetArchivedWorkflowPropertiesResponse:
    """
    Workflow definition, returned by z/OSMF on "get archived workflow properties" request.
    See more at: [Get the properties of an archived workflow: JSON object that is returned to a get archived workflow properties request](https://www.ibm.com/docs/en/zos/3.1.0?topic=services-get-properties-archived-workflow#GETMethodRetrieveInformationArchived__ResponseBodyGetArchivedProperties)

    Parameters
    ----------
    workflowName: Optional[str]
        Descriptive name for the workflow.
    workflowKey: Optional[str]
        Workflow key. A string value, generated by z/OSMF to uniquely identify the workflow instance.
    workflowDescription: Optional[str]
        Description of the workflow.
    workflowID: Optional[str]
        Workflow ID. A short, arbitrary value that identifies the workflow.
    workflowVersion: Optional[str]
        Version of the workflow definition file.
    workflowDefinitionFileMD5Value: Optional[str]
        A 128-bit hash value that z/OSMF generates to uniquely identify the workflow definition file.
    vendor: Optional[str]
        Name of the vendor that provided the workflow definition file.
    owner: Optional[str]
        User ID of the workflow owner.
    system: Optional[str]
        Full name of the z/OS system on which the workflow is to be performed.
    category: Optional[Literal["general", "configuration"]]
        Category of the workflow.
    productID: Optional[str]
        Identifier of the product or component that is being configured through the workflow, 
        such as the product identifier (PID) or function modification identifier (FMID).
    productName: Optional[str]
        Name of the product or component that is being configured through the workflow.
    productVersion: Optional[str]
        Version and release of the product or component that is configured through the workflow.
    percentComplete: Optional[int]
        Percentage of the workflow that is completed.
    isCallable: Optional[bool]
        Indicates whether a workflow is eligible to be called by another workflow.
    containsParallelSteps: Optional[bool]
    	For a workflow with automated steps, this property indicates whether the automated steps 
        can be run in parallel (concurrently).
    scope: Optional[Literal["system", "sysplex", "none"]]
        Indicates the singleton scope for the workflow.
    statusName: Optional[Literal["in-progress", "complete", "automation-in-progress", "cancelled"]]
        Indicates the current workflow status.
    deleteCompletedJobs: Optional[bool]
        For a workflow that submits a job, this property specifies whether the job is deleted 
        from the JES spool after it completes successfully.
    automationStatus: Optional[WorkflowAutomationStatusResponse]
        A WorkflowAutomationStatusResponse object that contains details about
        the most recent start automation request for the workflow.
    jobsOutputDirectory: Optional[str]
        Name of the UNIX directory that is used for automatically saving job spool files from the workflow.
    autoDeleteOnCompletion: Optional[bool]
        Specifies whether the workflow is automatically deleted from the system after it completes successfully.
    access: Optional[Literal["Public", "Restricted", "Private"]]
        Specifies the access type for the workflow.
    archivedTime: Optional[str]
        Date and time on the system when the workflow was archived.
    accountInfo: Optional[str]
        For a workflow that submits a job, this property specifies the account information to use 
        in the JCL JOB statement.
    jobStatement: Optional[str]
        For a workflow that submits a job, this property specifies the JOB statement JCL that is used in the job.
    steps: Optional[list['ArchivedWorkflowStepResponse']]
        Array of one or more ArchivedWorkflowStepResponse objects 
        that contain details about each of the steps in the workflow.
    variables: Optional[list[WorkflowVariableResponse]]
        Array of one or more ArchivedWorkflowVariableResponse objects 
        that contain details about each of the steps in the workflow.
    """

    workflowName: Optional[str] = None
    workflowKey: Optional[str] = None
    workflowDescription: Optional[str] = None
    workflowID: Optional[str] = None
    workflowVersion: Optional[str] = None
    workflowDefinitionFileMD5Value: Optional[str] = None
    vendor: Optional[str] = None
    owner: Optional[str] = None
    system: Optional[str] = None
    category: Optional[Literal["general", "configuration"]] = None
    productID: Optional[str] = None
    productName: Optional[str] = None
    productVersion: Optional[str] = None
    percentComplete: Optional[int] = None
    isCallable: Optional[bool] = None
    containsParallelSteps: Optional[bool] = None
    scope: Optional[Literal["system", "sysplex", "none"]] = None
    statusName: Optional[Literal["archived"]] = None
    deleteCompletedJobs: Optional[bool] = None
    automationStatus: Optional[WorkflowAutomationStatusResponse] = None
    jobsOutputDirectory: Optional[str] = None
    autoDeleteOnCompletion: Optional[bool] = None
    access: Optional[Literal["Public", "Restricted", "Private"]] = None
    archivedTime: Optional[str] = None
    accountInfo: Optional[str] = None
    jobStatement: Optional[str] = None
    steps: Optional[list['ArchivedWorkflowStepResponse']] = None
    variables: Optional[list[WorkflowVariableResponse]] = None

    def __init__(self, response: dict[str, Any]) -> None:
        for key, value in response.items():
            if key == "automationStatus":
                value = WorkflowAutomationStatusResponse(value) if not value == None else None
            elif key == "steps":
                value = [ArchivedWorkflowStepResponse(x) for x in value] if not value == None else None
            elif key == "variables":
                value = [WorkflowVariableResponse(x) for x in value] if not value == None else None
            super().__setattr__(key, value)

    def __getitem__(self, key: str) -> Any:
        return self.__dict__[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.__dict__[key] = value

@dataclass
class ArchivedWorkflowStepResponse:
    """
    A step-info object that contains details about a specific step of the archived workflow.

    For more information:
    - [Get the properties of an archived workflow: Format of the step-info object](https://www.ibm.com/docs/en/zos/3.1.0?topic=services-get-properties-archived-workflow#GETMethodRetrieveInformationArchived__FormatOfTheStep-infoObject__title__1)

    Parameters
    ----------
    name: Optional[str]
        (All step types) Name of the step.
    actualStatusCode: Optional[str]
        (REST steps only) The actual HTTP status code that is received from the REST API request.
    assignees: Optional[list[str]]
        (Calling steps and template steps) One or more user IDs that are assigned to the step.
    autoEnable: Optional[bool]
        (All step types) Indicates whether the step can be performed automatically when all prerequisite
        steps are completed, and no user inputs are required.
    calledInstanceURI: Optional[str]
        (Calling steps only) For a step that calls another workflow for execution,
        this property contains the URI path of the called workflow instance.
    calledWorkflowID: Optional[str]
        (Calling steps only) Specifies the workflow ID of a workflow definition file.
    calledWorkflowVersion: Optional[str]
        (Calling steps only) Specifies the workflow version of a workflow definition file.
    calledWorkflowMD5: Optional[str]
        (Calling steps only) Specifies the 128-bit hash value of a workflow definition file.
    calledWorkflowDescription: Optional[str]
        (Calling steps only) Describes the workflow to be called, from the point of view of the calling workflow.
    calledWorkflowDefinitionFile: Optional[str]
        (Calling steps only) Specifies the name of the workflow definition file that is used to create a new workflow
        if an existing instance is not found when this step is performed.
    description: Optional[str]
        (All step types) Step description.
    expectedStatusCode: Optional[str]
        (REST steps only) The expected HTTP status code from the REST API request.
    failedPattern: Optional[list[str]]
        (Template steps only) Optional regular expression that can be returned for program execution failures.
    hasCalledWorkflow: Optional[bool]
        (Calling steps and template steps) Indicates whether this step calls another workflow.
    hostname: Optional[str]
        (REST steps only) Indicates the hostname or IP address of the site to which the REST request is directed.
    httpMethod: Optional[Literal["GET", "PUT", "POST", "DELETE"]]
        (REST steps only) Indicates the HTTP method that is used for issuing the REST API request.
    instructions: Optional[str]
        (Template steps only) Detailed instructions on what the user must do to perform the step.
    instructionsSub: Optional[bool]
        (Template steps only) Indicates whether the step instructions contain variables.
    isConditionStep: Optional[bool]
        (Calling steps and template steps) Indicates whether this step is a conditional step.
    isRestStep: Optional[bool]
        (All step types) Indicates whether this step is a REST API step.
    maxLrecl: Optional[int]
        (Template steps only) For a step that submits a job, this value specifies the maximum record length,
        in bytes, for the input data for the job.
    optional: Optional[bool]
        (All step types) Indicates whether the step is optional.
    output: Optional[str]
        (Template steps only) Indicates the name of the output file that is produced
        by the step (a data set or UNIX file).
    outputSub: Optional[bool]
        (Template steps only) Indicates whether the output file name contains variable substitution.
    outputVariablesPrefix: Optional[str]
        (Template steps only) For a step that creates a variable, this property contains a prefix
        that identifies a string as a variable.
    owner: Optional[str]
        (Calling steps and template steps) User ID of the step owner.
    port: Optional[str]
        (REST steps only) Port number that is associated with the REST request.
    portSub: Optional[bool]
        (REST steps only) Indicates whether the port number contains variable substitution.
    prereqStep: Optional[list[str]]
        (All step types) Lists the names of the steps that must be completed before this step can be performed.
    procName: Optional[str]
        (Template steps only) For a step that runs a program under TSO/E, this property contains the name
        of the logon procedure that is used to log into the TSO/E address space.
    queryParameters: Optional[str]
        (REST steps only) For a REST request that includes query parameters,
        this property contains the query parameters.
    queryParametersSub: Optional[bool]
        (REST steps only) Indicates whether the query parameters contain variable substitution.
    regionSize: Optional[str]
        (Template steps only) For a step that runs a program under TSO/E,
        this property contains the region size for the TSO/E address space.
    requestBody: Optional[str]
        (REST steps only) For a REST request that includes a request body, this property contains the request body.
    requestBodySub: Optional[bool]
        (REST steps only) Indicates whether the request body variable substitution.
    returnCode: Optional[str]
        (Template steps only) For a step that submits a job to run,
        this property indicates the return code that was returned when the job was submitted.
    saveAsDataset: Optional[str]
        (Template steps only) Data set name (fully qualified, no quotation marks) that contains the saved JCL.
    saveAsDatasetSub: Optional[bool]
        (Template steps only) Indicates whether the data set name contains variable substitution.
    saveAsUnixFile: Optional[str]
        (Template steps only) UNIX file name (absolute name) that contains the saved JCL.
    saveAsUnixFileSub: Optional[bool]
        (Template steps only) Indicates whether the UNIX file name contains variable substitution.
    schemeName: Optional[str]
        (REST steps only) The scheme name that is used for the REST request. For example: http.
    schemeNameSub: Optional[bool]
        (REST steps only) Indicates whether the scheme name contains variable substitution.
    scriptParameters: Optional[list[str]]
        (Template steps only) For a step that runs a program,
        this property contains the input parameters that can be set by the step owner.
    skills: Optional[str]
        (Calling steps and template steps) The type of skills that are required to perform the step.
    state: Optional[Literal["Unassigned", "Assigned", "Not Ready", "Ready", "In Progress", "Submitted", "Complete", "Skipped", "Complete (Override)", "Failed", "Conflicts", "Condition Not Satisfied"]]
        (All step types) State of the step.
    stepNumber: Optional[str]
        (All step types) The step number.
    steps: Optional[list['ArchivedWorkflowStepResponse']]
        (All step types) For a parent step, this is a nested array of step-info objects.
    submitAs: Optional[Literal["JCL", "TSO-REXX", "shell-JCL", "TSO-REXX-JCL", "TSO-UNIX-REXX", "TSO-UNIX-shell"]]
        (Template steps only) Indicates the type of executable program.
    successPattern: Optional[str]
        (Template steps only) Regular expression that is returned for a successful program execution.
    template: Optional[str]
        (Template steps only) Indicates the template that is used to run a program
        or batch job (inline or external file).
    templateSub: Optional[bool]
        (Template steps only) Indicates whether template contains variable substitution.
    timeout: Optional[str]
        (Template steps only) For a step that runs a REXX exec or UNIX shell script,
        this property contains the maximum amount of time that the program can run before
        it is ended by a timeout condition.
    title: Optional[str]
        (All step types) Step title.
    uriPath: Optional[str]
        (REST steps only) The URI path to use for the REST request.
    uriPathSub: Optional[bool]
        (REST steps only) Indicates whether the URI path contains variable substitution.
    userDefined: Optional[bool]
        (All step types) Indicates whether the step was added manually to the workflow.
    variable_references: Optional[list[WorkflowVariableReferenceResponse]]
        (Template steps only) An array of WorkflowVariableReferenceResponse objects
    weight: Optional[int]
        (Calling steps and template steps) The relative difficulty of the step compared to other steps
        within this workflow (an integer value 1 - 1000).
    """

    name: Optional[str] = None
    actualStatusCode: Optional[str] = None
    assignees: Optional[list[str]] = None
    autoEnable: Optional[bool] = None
    calledInstanceURI: Optional[str] = None
    calledWorkflowID: Optional[str] = None
    calledWorkflowVersion: Optional[str] = None
    calledWorkflowMD5: Optional[str] = None
    calledWorkflowDescription: Optional[str] = None
    calledWorkflowDefinitionFile: Optional[str] = None
    description: Optional[str] = None
    expectedStatusCode: Optional[str] = None
    failedPattern: Optional[list[str]] = None
    hasCalledWorkflow: Optional[bool] = None
    hostname: Optional[str] = None
    httpMethod: Optional[Literal["GET", "PUT", "POST", "DELETE"]] = None
    instructions: Optional[str] = None
    instructionsSub: Optional[bool] = None
    isConditionStep: Optional[bool] = None
    isRestStep: Optional[bool] = None
    maxLrecl: Optional[int] = None
    optional: Optional[bool] = None
    output: Optional[str] = None
    outputSub: Optional[bool] = None
    outputVariablesPrefix: Optional[str] = None
    owner: Optional[str] = None
    port: Optional[str] = None
    portSub: Optional[bool] = None
    prereqStep: Optional[list[str]] = None
    procName: Optional[str] = None
    queryParameters: Optional[str] = None
    queryParametersSub: Optional[bool] = None
    regionSize: Optional[str] = None
    requestBody: Optional[str] = None
    requestBodySub: Optional[bool] = None
    returnCode: Optional[str] = None
    saveAsDataset: Optional[str] = None
    saveAsDatasetSub: Optional[bool] = None
    saveAsUnixFile: Optional[str] = None
    saveAsUnixFileSub: Optional[bool] = None
    schemeName: Optional[str] = None
    schemeNameSub: Optional[bool] = None
    scriptParameters: Optional[list[str]] = None
    skills: Optional[str] = None
    state: Optional[Literal["Unassigned", "Assigned", "Not Ready", "Ready", "In Progress", "Submitted", "Complete", "Skipped", "Complete (Override)", "Failed", "Conflicts", "Condition Not Satisfied"]] = None
    stepNumber: Optional[str] = None
    steps: Optional[list['ArchivedWorkflowStepResponse']] = None
    submitAs: Optional[Literal["JCL", "TSO-REXX", "shell-JCL", "TSO-REXX-JCL", "TSO-UNIX-REXX", "TSO-UNIX-shell"]] = None
    successPattern: Optional[str] = None
    template: Optional[str] = None
    templateSub: Optional[bool] = None
    timeout: Optional[str] = None
    title: Optional[str] = None
    uriPath: Optional[str] = None
    uriPathSub: Optional[bool] = None
    userDefined: Optional[bool] = None
    variable_references: Optional[list[WorkflowVariableReferenceResponse]] = None
    weight: Optional[int] = None

    def __init__(self, response: dict[str, Any]) -> None:
        for k, value in response.items():
            key = k.replace("-", "_")
            if key == "assignees":
                value = [x.strip() for x in value.split(",") if x.strip()] if not value == None else None
            elif key == "steps":
                value = [ArchivedWorkflowStepResponse(x) for x in value] if not value == None else None
            elif key == "variable_references":
                value = [WorkflowVariableReferenceResponse(x) for x in value] if not value == None else None
            super().__setattr__(key, value)

    def __getitem__(self, key: str) -> Any:
        return self.__dict__[key.replace("-", "_")]

    def __setitem__(self, key: str, value: Any) -> None:
        self.__dict__[key.replace("-", "_")] = value
